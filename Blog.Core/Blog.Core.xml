<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Core</name>
    </assembly>
    <members>
        <member name="M:Blog.Core.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实现接口唯一方法
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:Blog.Core.AuthHelper.OverWrite.JwtHelper">
            <summary>
            帮助类，可以生成Token，可将Token反序列成model
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.OverWrite.JwtHelper.IssueJWT(Blog.Core.AuthHelper.OverWrite.TokenModelJWT)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.AuthHelper.OverWrite.JwtHelper.SerializeJWT(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.AuthHelper.OverWrite.TokenModelJWT">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJWT.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJWT.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJWT.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:Blog.Core.AuthHelper.OverWrite.JwtTokenAuth">
            <summary>
            中间件，用来过滤每一个http请求，就是每当一个用户发送请求的时候，都先走这一步，然后再去访问http请求的接口
            </summary>
        </member>
        <member name="F:Blog.Core.AuthHelper.OverWrite.JwtTokenAuth._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.OverWrite.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Get(System.Int32)">
            <summary>
            根据id获取信息
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.GetBlogs">
            <summary>
            获取博客列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJWTStr(System.Int64,System.String)">
            <summary>
            获取JWT，并存入缓存
            </summary>
            <returns></returns>
        </member>
        <member name="P:Blog.Core.Startup.Configuration">
            <summary>
            Configuration属性
            </summary>
        </member>
    </members>
</doc>
